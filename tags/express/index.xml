<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Express on 阿泽的博客</title>
    <link>https://liuzeaa.github.io/goblog/tags/express/</link>
    <description>Recent content in Express on 阿泽的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 29 May 2018 11:00:08 +0000</lastBuildDate>
    
	<atom:link href="https://liuzeaa.github.io/goblog/tags/express/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>部署小说api服务到腾讯云</title>
      <link>https://liuzeaa.github.io/goblog/post/%E9%83%A8%E7%BD%B2%E5%B0%8F%E8%AF%B4api%E6%9C%8D%E5%8A%A1%E5%88%B0%E8%85%BE%E8%AE%AF%E4%BA%91/</link>
      <pubDate>Tue, 29 May 2018 11:00:08 +0000</pubDate>
      
      <guid>https://liuzeaa.github.io/goblog/post/%E9%83%A8%E7%BD%B2%E5%B0%8F%E8%AF%B4api%E6%9C%8D%E5%8A%A1%E5%88%B0%E8%85%BE%E8%AE%AF%E4%BA%91/</guid>
      <description>&lt;p&gt;小说api1.0版本写完了，接下来就开始部署到服务器上，用到了nginx、pm2、nvm、git、OpenSSL。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Express开发小说API接口服务1.0（三）</title>
      <link>https://liuzeaa.github.io/goblog/post/%E4%BD%BF%E7%94%A8express%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AF%B4api%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A11-0%E4%B8%89/</link>
      <pubDate>Sat, 26 May 2018 10:54:41 +0000</pubDate>
      
      <guid>https://liuzeaa.github.io/goblog/post/%E4%BD%BF%E7%94%A8express%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AF%B4api%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A11-0%E4%B8%89/</guid>
      <description>&lt;p&gt;之前发现追书神器API详情页竟然没有下一章和上一章的返回值，只能自己动手封装一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Express开发小说API接口服务1.0(二)</title>
      <link>https://liuzeaa.github.io/goblog/post/%E4%BD%BF%E7%94%A8express%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AF%B4api%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1-%E4%BA%8C/</link>
      <pubDate>Fri, 18 May 2018 13:26:05 +0000</pubDate>
      
      <guid>https://liuzeaa.github.io/goblog/post/%E4%BD%BF%E7%94%A8express%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AF%B4api%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1-%E4%BA%8C/</guid>
      <description>&lt;p&gt;之前完成了首页和搜索的接口，现在就开始写剩下的接口。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Express开发小说API接口服务1.0（一）</title>
      <link>https://liuzeaa.github.io/goblog/post/%E4%BD%BF%E7%94%A8express%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AF%B4api%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 17 May 2018 15:10:56 +0000</pubDate>
      
      <guid>https://liuzeaa.github.io/goblog/post/%E4%BD%BF%E7%94%A8express%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AF%B4api%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;p&gt;1.0版本技术栈使用express-generator、express、request、morgan、file-stream-rotator。接口用追书神器API。
目前接口设计有首页，小说详情页，搜索，小说文章列表页，排行API。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用express-generator快速生成express应用</title>
      <link>https://liuzeaa.github.io/goblog/post/%E4%BD%BF%E7%94%A8express-generator%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90express%E5%BA%94%E7%94%A8/</link>
      <pubDate>Mon, 14 May 2018 16:08:03 +0000</pubDate>
      
      <guid>https://liuzeaa.github.io/goblog/post/%E4%BD%BF%E7%94%A8express-generator%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90express%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;p&gt;express-generator是Express应用的快速生成器，可以随意使用此结构或者对其进行修改以最大程度满足自己的需求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Express路由</title>
      <link>https://liuzeaa.github.io/goblog/post/express%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Mon, 07 May 2018 17:50:08 +0000</pubDate>
      
      <guid>https://liuzeaa.github.io/goblog/post/express%E8%B7%AF%E7%94%B1/</guid>
      <description>&lt;p&gt;之前在Express入坑里面简单讲了下路由的用法，现在就讲下如果再项目中怎么配置路由。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Express框架cookie和session</title>
      <link>https://liuzeaa.github.io/goblog/post/express%E6%A1%86%E6%9E%B6cookie%E5%92%8Csession/</link>
      <pubDate>Sun, 06 May 2018 17:32:54 +0000</pubDate>
      
      <guid>https://liuzeaa.github.io/goblog/post/express%E6%A1%86%E6%9E%B6cookie%E5%92%8Csession/</guid>
      <description>&lt;p&gt;HTTP协议是无状态的，所以要通过一些机制来记录用户的信息。cookie是存在浏览器端的，session是存在服务器端。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Express文件上传</title>
      <link>https://liuzeaa.github.io/goblog/post/express%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</link>
      <pubDate>Fri, 04 May 2018 15:58:58 +0000</pubDate>
      
      <guid>https://liuzeaa.github.io/goblog/post/express%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</guid>
      <description>&lt;p&gt;在后台项目中会经常碰见文件上传这个需求，例如用户上传一张头像等。。。今天就用Multer这个中间件来解决文件上传。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Express中间件body-parser简单实现</title>
      <link>https://liuzeaa.github.io/goblog/post/express%E4%B8%AD%E9%97%B4%E4%BB%B6body-parser%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 18 Apr 2018 11:49:16 +0000</pubDate>
      
      <guid>https://liuzeaa.github.io/goblog/post/express%E4%B8%AD%E9%97%B4%E4%BB%B6body-parser%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;之前文章写了怎么用body-parser中间件处理post请求，今天就大概实现下body-parser中urlencoded 这个方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Express处理数据请求</title>
      <link>https://liuzeaa.github.io/goblog/post/express%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Mon, 02 Apr 2018 17:28:39 +0000</pubDate>
      
      <guid>https://liuzeaa.github.io/goblog/post/express%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/</guid>
      <description>&lt;p&gt;之前文章里面介绍了如何用原生Node处理数据请求。
现在通过Express框架处理post和get请求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>express简单入坑</title>
      <link>https://liuzeaa.github.io/goblog/post/express%E7%AE%80%E5%8D%95%E5%85%A5%E5%9D%91/</link>
      <pubDate>Mon, 19 Mar 2018 13:38:00 +0000</pubDate>
      
      <guid>https://liuzeaa.github.io/goblog/post/express%E7%AE%80%E5%8D%95%E5%85%A5%E5%9D%91/</guid>
      <description>&lt;p&gt;Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>